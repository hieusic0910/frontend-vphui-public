{"ast":null,"code":"import _toConsumableArray from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/hieutran/Desktop/create-social-network-master/frontend/src/pages/Messages/MessagesChat.js\",\n    _templateObject,\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useQuery, useApolloClient } from '@apollo/client';\nimport { LoadingDots } from 'components/Loading';\nimport MessagesChatConversation from './MessagesChatConversation';\nimport MessagesChatHeading from './MessagesChatHeading';\nimport { GET_MESSAGES, GET_MESSAGES_SUBSCRIPTION, UPDATE_MESSAGE_SEEN } from 'graphql/messages';\nimport { GET_USER, GET_CONVERSATIONS, GET_AUTH_USER } from 'graphql/user';\nimport * as Routes from 'routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Root = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n\"])));\n/**\n * Messages chat wrapper\n */\n\n_c = Root;\n\nvar MessagesChat = function MessagesChat(_ref) {\n  _s();\n\n  var match = _ref.match,\n      authUser = _ref.authUser;\n  var userId = match.params.userId;\n  var client = useApolloClient();\n\n  var _useQuery = useQuery(GET_USER, {\n    variables: {\n      id: userId\n    },\n    skip: userId === Routes.NEW_ID_VALUE\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var _useQuery2 = useQuery(GET_MESSAGES, {\n    variables: {\n      authUserId: authUser.id,\n      userId: userId\n    },\n    skip: userId === Routes.NEW_ID_VALUE,\n    fetchPolicy: 'network-only'\n  }),\n      subscribeToMore = _useQuery2.subscribeToMore,\n      messages = _useQuery2.data,\n      messagesLoading = _useQuery2.loading;\n\n  var updateMessageSeen = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return client.mutate({\n              mutation: UPDATE_MESSAGE_SEEN,\n              variables: {\n                input: {\n                  receiver: authUser.id,\n                  sender: userId\n                }\n              },\n              refetchQueries: function refetchQueries() {\n                return [{\n                  query: GET_CONVERSATIONS,\n                  variables: {\n                    authUserId: authUser.id\n                  }\n                }, {\n                  query: GET_AUTH_USER\n                }];\n              }\n            });\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  })), [authUser.id, client, userId]);\n  useEffect(function () {\n    var unsubscribe = subscribeToMore({\n      document: GET_MESSAGES_SUBSCRIPTION,\n      variables: {\n        authUserId: authUser.id,\n        userId: userId\n      },\n      updateQuery: function updateQuery(prev, _ref3) {\n        var subscriptionData = _ref3.subscriptionData;\n        if (!subscriptionData.data) return prev;\n        updateMessageSeen();\n        var newMessage = subscriptionData.data.messageCreated;\n        var mergedMessages = [].concat(_toConsumableArray(prev.getMessages), [newMessage]);\n        return {\n          getMessages: mergedMessages\n        };\n      }\n    });\n    return function () {\n      unsubscribe();\n    };\n  }, [authUser.id, userId, subscribeToMore, updateMessageSeen]);\n  useEffect(function () {\n    if (userId !== Routes.NEW_ID_VALUE) {\n      updateMessageSeen();\n    }\n  }, [userId, updateMessageSeen]);\n\n  if (loading || messagesLoading) {\n    return /*#__PURE__*/_jsxDEV(Root, {\n      children: /*#__PURE__*/_jsxDEV(LoadingDots, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, _this);\n  }\n\n  var chatUser = null;\n\n  if (data && data.getUser) {\n    chatUser = data.getUser;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Root, {\n    children: [/*#__PURE__*/_jsxDEV(MessagesChatHeading, {\n      match: match,\n      chatUser: chatUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MessagesChatConversation, {\n      authUser: authUser,\n      messages: messages ? messages.getMessages : [],\n      chatUser: chatUser,\n      data: messages,\n      match: match\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MessagesChat, \"CJxHzz1qVDKmdfF1exPR5NKwf7M=\", false, function () {\n  return [useApolloClient, useQuery, useQuery];\n});\n\n_c2 = MessagesChat;\nMessagesChat.propTypes = {\n  match: PropTypes.object.isRequired,\n  authUser: PropTypes.object.isRequired\n};\nexport default MessagesChat;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Root\");\n$RefreshReg$(_c2, \"MessagesChat\");","map":{"version":3,"sources":["/Users/hieutran/Desktop/create-social-network-master/frontend/src/pages/Messages/MessagesChat.js"],"names":["React","useEffect","useCallback","PropTypes","styled","useQuery","useApolloClient","LoadingDots","MessagesChatConversation","MessagesChatHeading","GET_MESSAGES","GET_MESSAGES_SUBSCRIPTION","UPDATE_MESSAGE_SEEN","GET_USER","GET_CONVERSATIONS","GET_AUTH_USER","Routes","Root","div","MessagesChat","match","authUser","userId","params","client","variables","id","skip","NEW_ID_VALUE","data","loading","authUserId","fetchPolicy","subscribeToMore","messages","messagesLoading","updateMessageSeen","mutate","mutation","input","receiver","sender","refetchQueries","query","unsubscribe","document","updateQuery","prev","subscriptionData","newMessage","messageCreated","mergedMessages","getMessages","chatUser","getUser","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useQuery, useApolloClient } from '@apollo/client';\n\nimport { LoadingDots } from 'components/Loading';\nimport MessagesChatConversation from './MessagesChatConversation';\nimport MessagesChatHeading from './MessagesChatHeading';\n\nimport { GET_MESSAGES, GET_MESSAGES_SUBSCRIPTION, UPDATE_MESSAGE_SEEN } from 'graphql/messages';\nimport { GET_USER, GET_CONVERSATIONS, GET_AUTH_USER } from 'graphql/user';\n\nimport * as Routes from 'routes';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\n/**\n * Messages chat wrapper\n */\nconst MessagesChat = ({ match, authUser }) => {\n  const { userId } = match.params;\n\n  const client = useApolloClient();\n\n  const { data, loading } = useQuery(GET_USER, {\n    variables: { id: userId },\n    skip: userId === Routes.NEW_ID_VALUE,\n  });\n\n  const { subscribeToMore, data: messages, loading: messagesLoading } = useQuery(GET_MESSAGES, {\n    variables: { authUserId: authUser.id, userId },\n    skip: userId === Routes.NEW_ID_VALUE,\n    fetchPolicy: 'network-only',\n  });\n\n  const updateMessageSeen = useCallback(async () => {\n    try {\n      await client.mutate({\n        mutation: UPDATE_MESSAGE_SEEN,\n        variables: {\n          input: {\n            receiver: authUser.id,\n            sender: userId,\n          },\n        },\n        refetchQueries: () => [\n          {\n            query: GET_CONVERSATIONS,\n            variables: { authUserId: authUser.id },\n          },\n          { query: GET_AUTH_USER },\n        ],\n      });\n    } catch (err) {}\n  }, [authUser.id, client, userId]);\n\n  useEffect(() => {\n    const unsubscribe = subscribeToMore({\n      document: GET_MESSAGES_SUBSCRIPTION,\n      variables: { authUserId: authUser.id, userId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        updateMessageSeen();\n\n        const newMessage = subscriptionData.data.messageCreated;\n        const mergedMessages = [...prev.getMessages, newMessage];\n\n        return { getMessages: mergedMessages };\n      },\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [authUser.id, userId, subscribeToMore, updateMessageSeen]);\n\n  useEffect(() => {\n    if (userId !== Routes.NEW_ID_VALUE) {\n      updateMessageSeen();\n    }\n  }, [userId, updateMessageSeen]);\n\n  if (loading || messagesLoading) {\n    return (\n      <Root>\n        <LoadingDots />\n      </Root>\n    );\n  }\n\n  let chatUser = null;\n  if (data && data.getUser) {\n    chatUser = data.getUser;\n  }\n\n  return (\n    <Root>\n      <MessagesChatHeading match={match} chatUser={chatUser} />\n\n      <MessagesChatConversation\n        authUser={authUser}\n        messages={messages ? messages.getMessages : []}\n        chatUser={chatUser}\n        data={messages}\n        match={match}\n      />\n    </Root>\n  );\n};\n\nMessagesChat.propTypes = {\n  match: PropTypes.object.isRequired,\n  authUser: PropTypes.object.isRequired,\n};\n\nexport default MessagesChat;\n"]},"metadata":{},"sourceType":"module"}