{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { get, uniqBy, setWith, clone } from 'lodash';\n/**\n * Component that adds Infinite scroll functionality to UI\n */\n\nvar InfiniteScroll = function InfiniteScroll(_ref) {\n  _s();\n\n  var data = _ref.data,\n      dataKey = _ref.dataKey,\n      fetchMore = _ref.fetchMore,\n      variables = _ref.variables,\n      count = _ref.count,\n      children = _ref.children;\n  var handleScroll = useMemo(function () {\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var loadMore, windowHeight, scrollTop, offsetHeight, scrolled;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loadMore = function loadMore() {\n                return fetchMore({\n                  variables: _objectSpread(_objectSpread({}, variables), {}, {\n                    skip: data.length\n                  }),\n                  updateQuery: function updateQuery(prev, _ref3) {\n                    var fetchMoreResult = _ref3.fetchMoreResult;\n                    var previousData = get(prev, dataKey);\n                    var fetchMoreData = get(fetchMoreResult, dataKey);\n                    return setWith(clone(prev), dataKey, uniqBy([].concat(_toConsumableArray(previousData), _toConsumableArray(fetchMoreData)), 'id'), clone);\n                  }\n                });\n              };\n\n              windowHeight = window.innerHeight;\n              scrollTop = document.documentElement.scrollTop;\n              offsetHeight = document.documentElement.offsetHeight;\n              scrolled = windowHeight + scrollTop > offsetHeight - offsetHeight / 3; // Stop event listener if all the data has been loaded\n\n              if (!(data.length >= count)) {\n                _context.next = 8;\n                break;\n              }\n\n              window.removeEventListener('scroll', handleScroll);\n              return _context.abrupt(\"return\");\n\n            case 8:\n              // Load more data if user has scrolled to bottom and if there's still data in db to display\n              if (scrolled) {\n                window.removeEventListener('scroll', handleScroll);\n                loadMore();\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }, [count, data.length, dataKey, fetchMore, variables]);\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    };\n  }, [handleScroll]);\n  return children(data);\n};\n\n_s(InfiniteScroll, \"nEr17AemT809maPaAPtI0ItdOxI=\");\n\n_c = InfiniteScroll;\nInfiniteScroll.propTypes = {\n  data: PropTypes.array.isRequired,\n  dataKey: PropTypes.string.isRequired,\n  count: PropTypes.number.isRequired,\n  fetchMore: PropTypes.func.isRequired,\n  variables: PropTypes.object.isRequired,\n  children: PropTypes.func.isRequired\n};\nexport default InfiniteScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"sources":["/Users/hieutran/Desktop/create-social-network-master/frontend/src/components/InfiniteScroll.js"],"names":["useEffect","useMemo","PropTypes","get","uniqBy","setWith","clone","InfiniteScroll","data","dataKey","fetchMore","variables","count","children","handleScroll","loadMore","skip","length","updateQuery","prev","fetchMoreResult","previousData","fetchMoreData","windowHeight","window","innerHeight","scrollTop","document","documentElement","offsetHeight","scrolled","removeEventListener","addEventListener","propTypes","array","isRequired","string","number","func","object"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { get, uniqBy, setWith, clone } from 'lodash';\n\n/**\n * Component that adds Infinite scroll functionality to UI\n */\nconst InfiniteScroll = ({ data, dataKey, fetchMore, variables, count, children }) => {\n  const handleScroll = useMemo(\n    () => async () => {\n      const loadMore = () => {\n        return fetchMore({\n          variables: { ...variables, skip: data.length },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            const previousData = get(prev, dataKey);\n            const fetchMoreData = get(fetchMoreResult, dataKey);\n            return setWith(clone(prev), dataKey, uniqBy([...previousData, ...fetchMoreData], 'id'), clone);\n          },\n        });\n      };\n\n      const windowHeight = window.innerHeight;\n      const scrollTop = document.documentElement.scrollTop;\n      const offsetHeight = document.documentElement.offsetHeight;\n      const scrolled = windowHeight + scrollTop > offsetHeight - offsetHeight / 3;\n\n      // Stop event listener if all the data has been loaded\n      if (data.length >= count) {\n        window.removeEventListener('scroll', handleScroll);\n        return;\n      }\n\n      // Load more data if user has scrolled to bottom and if there's still data in db to display\n      if (scrolled) {\n        window.removeEventListener('scroll', handleScroll);\n        loadMore();\n      }\n    },\n    [count, data.length, dataKey, fetchMore, variables]\n  );\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  return children(data);\n};\n\nInfiniteScroll.propTypes = {\n  data: PropTypes.array.isRequired,\n  dataKey: PropTypes.string.isRequired,\n  count: PropTypes.number.isRequired,\n  fetchMore: PropTypes.func.isRequired,\n  variables: PropTypes.object.isRequired,\n  children: PropTypes.func.isRequired,\n};\n\nexport default InfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}