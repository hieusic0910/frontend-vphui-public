{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useApolloClient } from '@apollo/client';\nimport { CREATE_NOTIFICATION, DELETE_NOTIFICATION } from 'graphql/notification';\nimport { useStore } from 'store';\n/**\n * React hook that Creates or Deletes a notification after like, follow or comment\n */\n\nexport var useNotifications = function useNotifications() {\n  _s();\n\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var client = useApolloClient();\n  /**\n   * Helper function for mutation\n   */\n\n  var mutate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mutation, variables) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return client.mutate({\n                mutation: mutation,\n                variables: {\n                  input: _objectSpread({}, variables)\n                }\n              });\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error while mutating a notification', _context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function mutate(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Creates a notification\n   */\n\n\n  var create = function create(_ref2) {\n    var user = _ref2.user,\n        postId = _ref2.postId,\n        notificationType = _ref2.notificationType,\n        notificationTypeId = _ref2.notificationTypeId;\n    return mutate(CREATE_NOTIFICATION, {\n      authorId: auth.user.id,\n      userId: user.id,\n      postId: postId,\n      notificationType: notificationType,\n      notificationTypeId: notificationTypeId\n    });\n  };\n  /**\n   * Removes a notification\n   */\n\n\n  var remove = function remove(_ref3) {\n    var notificationId = _ref3.notificationId;\n    return mutate(DELETE_NOTIFICATION, {\n      id: notificationId\n    });\n  };\n  /**\n   * Checks if user has already a notification and based on that Creates or Deletes a notification\n   */\n\n\n  var toggle = function toggle(_ref4) {\n    var user = _ref4.user,\n        postId = _ref4.postId,\n        notificationType = _ref4.notificationType,\n        notificationTypeId = _ref4.notificationTypeId,\n        hasDone = _ref4.hasDone;\n    var type = notificationType.toLowerCase();\n    var isNotified = user.notifications.find(function (n) {\n      return n[type] && hasDone && n[type].id === hasDone.id;\n    });\n    var notificationId = isNotified ? isNotified.id : null;\n    var operation = notificationId ? 'delete' : 'create';\n    var options = {\n      create: {\n        mutation: CREATE_NOTIFICATION,\n        variables: {\n          authorId: auth.user.id,\n          userId: user.id,\n          postId: postId,\n          notificationType: notificationType,\n          notificationTypeId: notificationTypeId\n        }\n      },\n      delete: {\n        mutation: DELETE_NOTIFICATION,\n        variables: {\n          id: notificationId\n        }\n      }\n    };\n    return mutate(options[operation].mutation, options[operation].variables);\n  };\n\n  return {\n    create: create,\n    remove: remove,\n    toggle: toggle\n  };\n};\n\n_s(useNotifications, \"gzOYmcQvXB+eXcK7oWvp8wVf/Tw=\", false, function () {\n  return [useStore, useApolloClient];\n});","map":{"version":3,"sources":["/Users/hieutran/Desktop/create-social-network-master/frontend/src/hooks/useNotifications.js"],"names":["useApolloClient","CREATE_NOTIFICATION","DELETE_NOTIFICATION","useStore","useNotifications","auth","client","mutate","mutation","variables","input","console","error","create","user","postId","notificationType","notificationTypeId","authorId","id","userId","remove","notificationId","toggle","hasDone","type","toLowerCase","isNotified","notifications","find","n","operation","options","delete"],"mappings":"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","sourcesContent":["import { useApolloClient } from '@apollo/client';\nimport { CREATE_NOTIFICATION, DELETE_NOTIFICATION } from 'graphql/notification';\nimport { useStore } from 'store';\n\n/**\n * React hook that Creates or Deletes a notification after like, follow or comment\n */\nexport const useNotifications = () => {\n  const [{ auth }] = useStore();\n\n  const client = useApolloClient();\n\n  /**\n   * Helper function for mutation\n   */\n  const mutate = async (mutation, variables) => {\n    try {\n      return await client.mutate({\n        mutation,\n        variables: { input: { ...variables } },\n      });\n    } catch (error) {\n      console.error('Error while mutating a notification', error);\n    }\n  };\n\n  /**\n   * Creates a notification\n   */\n  const create = ({ user, postId, notificationType, notificationTypeId }) => {\n    return mutate(CREATE_NOTIFICATION, {\n      authorId: auth.user.id,\n      userId: user.id,\n      postId,\n      notificationType,\n      notificationTypeId,\n    });\n  };\n\n  /**\n   * Removes a notification\n   */\n  const remove = ({ notificationId }) => mutate(DELETE_NOTIFICATION, { id: notificationId });\n\n  /**\n   * Checks if user has already a notification and based on that Creates or Deletes a notification\n   */\n  const toggle = ({ user, postId, notificationType, notificationTypeId, hasDone }) => {\n    const type = notificationType.toLowerCase();\n    const isNotified = user.notifications.find((n) => n[type] && hasDone && n[type].id === hasDone.id);\n    const notificationId = isNotified ? isNotified.id : null;\n    const operation = notificationId ? 'delete' : 'create';\n    const options = {\n      create: {\n        mutation: CREATE_NOTIFICATION,\n        variables: {\n          authorId: auth.user.id,\n          userId: user.id,\n          postId,\n          notificationType,\n          notificationTypeId,\n        },\n      },\n      delete: {\n        mutation: DELETE_NOTIFICATION,\n        variables: { id: notificationId },\n      },\n    };\n\n    return mutate(options[operation].mutation, options[operation].variables);\n  };\n\n  return { create, remove, toggle };\n};\n"]},"metadata":{},"sourceType":"module"}