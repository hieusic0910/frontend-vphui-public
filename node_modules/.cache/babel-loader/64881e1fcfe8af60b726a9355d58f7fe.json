{"ast":null,"code":"/**\n * Converts unix timestamp into a time ago string like 2 hours ago\n *\n * @param {string} date unix timestamp\n */\nexport var timeAgo = function timeAgo(unixTimestamp) {\n  var date = new Date(parseInt(unixTimestamp));\n  var seconds = Math.floor((new Date() - date) / 1000);\n  var interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + ' years';\n  }\n\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return interval + ' months';\n  }\n\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return interval + ' days';\n  }\n\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return interval + ' hours';\n  }\n\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return interval + ' mins';\n  }\n\n  return Math.floor(seconds) + ' seconds';\n};\n/**\n * Converts unix timestamp to current date\n *\n * @param {string} date unix timestamp\n */\n\nexport var currentDate = function currentDate(unixTimestamp) {\n  var date = new Date(parseInt(unixTimestamp));\n  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  var month = months[date.getMonth() + 1];\n  var day = date.getDay();\n  var year = date.getFullYear();\n  var time = date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n  return \"\".concat(month, \" \").concat(day, \", \").concat(year, \" \").concat(time);\n};","map":{"version":3,"sources":["/Users/hieutran/Desktop/create-social-network-master/frontend/src/utils/date.js"],"names":["timeAgo","unixTimestamp","date","Date","parseInt","seconds","Math","floor","interval","currentDate","months","month","getMonth","day","getDay","year","getFullYear","time","toLocaleString","hour","minute","hour12"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,aAAD,EAAmB;AACxC,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASC,QAAQ,CAACH,aAAD,CAAjB,CAAb;AAEA,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIJ,IAAJ,KAAaD,IAAd,IAAsB,IAAjC,CAAhB;AACA,MAAIM,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,QAArB,CAAf;;AAEA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOA,QAAQ,GAAG,QAAlB;AACD;;AAEDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,OAArB,CAAX;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOA,QAAQ,GAAG,SAAlB;AACD;;AAEDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,KAArB,CAAX;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOA,QAAQ,GAAG,OAAlB;AACD;;AAEDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,IAArB,CAAX;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOA,QAAQ,GAAG,QAAlB;AACD;;AAEDA,EAAAA,QAAQ,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAX;;AACA,MAAIG,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOA,QAAQ,GAAG,OAAlB;AACD;;AAED,SAAOF,IAAI,CAACC,KAAL,CAAWF,OAAX,IAAsB,UAA7B;AACD,CA/BM;AAiCP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACR,aAAD,EAAmB;AAC5C,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASC,QAAQ,CAACH,aAAD,CAAjB,CAAb;AACA,MAAMS,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACR,IAAI,CAACU,QAAL,KAAkB,CAAnB,CAApB;AACA,MAAMC,GAAG,GAAGX,IAAI,CAACY,MAAL,EAAZ;AACA,MAAMC,IAAI,GAAGb,IAAI,CAACc,WAAL,EAAb;AACA,MAAMC,IAAI,GAAGf,IAAI,CAACgB,cAAL,CAAoB,OAApB,EAA6B;AACxCC,IAAAA,IAAI,EAAE,SADkC;AAExCC,IAAAA,MAAM,EAAE,SAFgC;AAGxCC,IAAAA,MAAM,EAAE;AAHgC,GAA7B,CAAb;AAMA,mBAAUV,KAAV,cAAmBE,GAAnB,eAA2BE,IAA3B,cAAmCE,IAAnC;AACD,CAdM","sourcesContent":["/**\n * Converts unix timestamp into a time ago string like 2 hours ago\n *\n * @param {string} date unix timestamp\n */\nexport const timeAgo = (unixTimestamp) => {\n  const date = new Date(parseInt(unixTimestamp));\n\n  const seconds = Math.floor((new Date() - date) / 1000);\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + ' years';\n  }\n\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    return interval + ' months';\n  }\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    return interval + ' days';\n  }\n\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) {\n    return interval + ' hours';\n  }\n\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) {\n    return interval + ' mins';\n  }\n\n  return Math.floor(seconds) + ' seconds';\n};\n\n/**\n * Converts unix timestamp to current date\n *\n * @param {string} date unix timestamp\n */\nexport const currentDate = (unixTimestamp) => {\n  const date = new Date(parseInt(unixTimestamp));\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  const month = months[date.getMonth() + 1];\n  const day = date.getDay();\n  const year = date.getFullYear();\n  const time = date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n\n  return `${month} ${day}, ${year} ${time}`;\n};\n"]},"metadata":{},"sourceType":"module"}