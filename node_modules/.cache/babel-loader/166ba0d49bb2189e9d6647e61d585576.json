{"ast":null,"code":"import _slicedToArray from \"/Users/hieutran/Desktop/create-social-network-master/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\n/**\n * React hook for detecting window resizing\n */\n\nexport var useWindowSize = function useWindowSize() {\n  _s();\n\n  var isClient = typeof window === 'object';\n  var getSize = useCallback(function () {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }, [isClient]);\n\n  var _useState = useState(getSize),\n      _useState2 = _slicedToArray(_useState, 2),\n      windowSize = _useState2[0],\n      setWindowSize = _useState2[1];\n\n  useEffect(function () {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    };\n  }, [getSize, isClient]);\n  return windowSize;\n};\n\n_s(useWindowSize, \"s/Way7oWF6tBBgSdDRcPgRkX80g=\");","map":{"version":3,"sources":["/Users/hieutran/Desktop/create-social-network-master/frontend/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useCallback","useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AACjC,MAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,QAAnC;AAEA,MAAMC,OAAO,GAAGJ,WAAW,CAAC,YAAM;AAChC,WAAO;AACLK,MAAAA,KAAK,EAAEH,QAAQ,GAAGC,MAAM,CAACG,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGC,MAAM,CAACM,WAAV,GAAwBF;AAFnC,KAAP;AAID,GAL0B,EAKxB,CAACL,QAAD,CALwB,CAA3B;;AAOA,kBAAoCJ,QAAQ,CAACM,OAAD,CAA5C;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,aAAnB;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACG,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASU,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACP,OAAO,EAAR,CAAb;AACD;;AAEDD,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO;AAAA,aAAMT,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAN;AAAA,KAAP;AACD,GAXQ,EAWN,CAACR,OAAD,EAAUF,QAAV,CAXM,CAAT;AAaA,SAAOQ,UAAP;AACD,CA1BM;;GAAMT,a","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * React hook for detecting window resizing\n */\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  const getSize = useCallback(() => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    };\n  }, [isClient]);\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [getSize, isClient]);\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}